from models.model import Model
from tensorflow.keras import Sequential, layers, models
from tensorflow.keras.layers.experimental.preprocessing import Rescaling
from tensorflow.keras.optimizers import RMSprop, Adam
import numpy as np

class RandomModel(Model):
    def _define_model(self, input_shape, categories_count):
        # Your code goes here
        # you have to initialize self.model to a keras model
        # very similar to transfered_model.py, the only difference is that you should randomize the weights
        # load your basic model with keras's load_model function
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        # randomize the weights of the loaded model, possibly by using _randomize_layers
        # use this model by removing the last layer, adding dense layers and an output layer

        self.model = models.load_model('results/Step_5.keras')
        self.model.pop()
        self.model.trainable = False
        
        self._randomize_layers(self.model)
        # add dense layer
        self.model.add(layers.Dense(32, activation='relu', name='new_dense_layer'))
        # add output layer
        self.model.add(layers.Dense(categories_count, activation='softmax', name='output_layer'))

        pass
    
    def _compile_model(self):
        # Your code goes here
        # you have to compile the keras model, similar to the example in the writeup
        optimizer = RMSprop(learning_rate=0.001)
        self.model.compile(optimizer=optimizer,
                           loss='categorical_crossentropy',
                           metrics=['accuracy'])
        pass

    @staticmethod
    def _randomize_layers(model):
        # Your code goes here

        # you can write a function here to set the weights to a random value
        # use this function in _define_model to randomize the weights of your loaded model

        for layer in model.layers:
            if len(layer.weights) > 0:
                weights = layer.get_weights()
                # randomize the weights
                for i in range(len(weights)):
                    weights[i] = np.random.rand(*weights[i].shape)
                weights = tuple(weights)
                layer.set_weights(weights)

        pass
