from models.model import Model
from tensorflow.keras import Sequential, layers, models
from tensorflow.keras.layers.experimental.preprocessing import Rescaling
from tensorflow.keras.optimizers import RMSprop, Adam

class TransferedModel(Model):
    def _define_model(self, input_shape, categories_count):
        # Your code goes here
        # you have to initialize self.model to a keras model
        # load your basic model with keras's load_model function
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        # use this model by removing the last layer, adding dense layers and an output layer

        self.model = models.load_model('results/Step_5.keras')
        
        # remove the last layer
        self.model.pop()

        # freeze the weights of the loaded model
        self.model.trainable = False
        # add dense layer
        self.model.add(layers.Dense(32, activation='relu', name='new_dense_layer'))
        # add output layer
        self.model.add(layers.Dense(categories_count, activation='softmax', name='output_layer'))

        pass
    
    def _compile_model(self):
        # Your code goes here
        # you have to compile the keras model, similar to the example in the writeup

        optimizer = RMSprop(learning_rate=0.001)
        self.model.compile(optimizer=optimizer,
                           loss='categorical_crossentropy',
                           metrics=['accuracy'])
        pass
